% Visualize 3D point clouds generated by different reconstruction models
% and compare them against a reference FARO point cloud. It calculates
% Chamfer Distance (CD) and optionally saves scaled point clouds using FARO
% scale, visualizations, and videos.

close all;
path('utility', path);

% Define directories
faroDir = '/Users/tim/Downloads/SparseView_Reconstruction/faro/crop';

resutlDir = '/Users/tim/Downloads/SparseView_Reconstruction/result/03052025';
pointDir = fullfile(resutlDir, "points");
videoDir = fullfile(resutlDir, "Videos_3SVRO");
scaledPointDir = fullfile(resutlDir, "scaled_points");

if ~exist(videoDir, 'dir')
    mkdir(videoDir);
end

if ~exist(scaledPointDir, 'dir')
    mkdir(scaledPointDir);
end

% Get all subfolders
subFolders = dir(pointDir);
subFolders = subFolders([subFolders.isdir]); 
subFolders = subFolders(~ismember({subFolders.name}, {'.', '..', 'AppleQSM'}));

% Get .ply files
firstSubFolder = fullfile(pointDir, subFolders(1).name);
plyFiles = dir(fullfile(firstSubFolder, '*.ply'));

% Fixed spacing for visualization
spacing = 1;
% Colormap for point clouds
colors = lines(length(subFolders) + 1);

% Initialize table data
cdTable = cell(length(plyFiles) + 1, length(subFolders) + 2);
cdTable(1, :) = [{'Tree'}, subFolders.name, {'FARO'}]; % Table headers
% Initialize normalization metadata
metaTable = cell(length(plyFiles) + 1, 3);
metaTable(1, :) = {'Tree Name', 'FARO Centroid', 'Max Distance from Centroid'};

% Define options
SAVE_SCALED = false;
FIG = false;
SCREENSHOT = false;
VIDEO = false;
cd_mode = 'deterministic';

csvFilePath = fullfile(videoDir, 'Chamfer_Distance_Table_pdist2.csv');
metaFilePath = fullfile(videoDir, 'Normalization_Metadata.csv');

% Loop through each .ply file
for fileIdx = 1:length(plyFiles)
    plyFileName = plyFiles(fileIdx).name;
    [~, name, ~] = fileparts(plyFileName);
    
    % Store tree name
    cdTable{fileIdx + 1, 1} = name;
    metaTable{fileIdx + 1, 1} = name;
    
    % Create figure
    fig = figure;
    hold on;
    title(sprintf('Visualizing %s', plyFileName), 'Color', 'w');

    % Load FARO point cloud
    faroFilePath = fullfile(faroDir, plyFileName);
    if exist(faroFilePath, 'file')
        faroPtCloud = pcread(faroFilePath);
        targetNumPoints = 40960;
        if faroPtCloud.Count > targetNumPoints
            faroPtCloud = pcdownsample(faroPtCloud, 'random', targetNumPoints / faroPtCloud.Count);
        end
        faroCentroid = mean(faroPtCloud.Location, 1);
        maxDistance = max(vecnorm(faroPtCloud.Location - faroCentroid, 2, 2));

        % Store data in the table
        metaTable{fileIdx + 1, 2} = faroCentroid;  % Store as a 1x3 vector
        metaTable{fileIdx + 1, 3} = maxDistance;   % Store max distance

        faroNormalizedLocations = (faroPtCloud.Location - faroCentroid) / maxDistance;
        faroColor = colors(1, :);
        faroColoredPtCloud = pointCloud(faroNormalizedLocations, 'Color', repmat(faroColor, size(faroNormalizedLocations, 1), 1));

        pcshow(faroColoredPtCloud, 'MarkerSize', 10);
        legendInfo{1} = 'FARO';
    else
        warning('FARO point cloud file %s not found.', faroFilePath);
        faroNormalizedLocations = [];
    end
    
    % Loop through each subfolder
    for i = 1:length(subFolders)
        plyFilePath = fullfile(pointDir, subFolders(i).name, plyFileName);
        ptCloud = pcread(plyFilePath);
        ptCentroid = mean(ptCloud.Location, 1);
        ptNormalizedLocations = (ptCloud.Location - ptCentroid) / max(vecnorm(ptCloud.Location - ptCentroid, 2, 2));
        
        if SAVE_SCALED
            % Scale using FARO normalization meta
            ptCloudLocation = (ptNormalizedLocations * maxDistance) + faroCentroid;
            ptScaledCloud = pointCloud(ptCloudLocation);
            ptFolder = fullfile(scaledPointDir, subFolders(i).name);
            if ~exist(ptFolder, "dir")
                mkdir(ptFolder)
            end
            ptFilePath = fullfile(ptFolder, plyFileName);
            pcwrite(ptScaledCloud, ptFilePath);
        end

        % Compute Chamfer Distance
        if ~isempty(faroNormalizedLocations)
            cd = chamfer_distance(ptNormalizedLocations, faroNormalizedLocations, cd_mode);
        else
            cd = NaN;
        end
        cdTable{fileIdx + 1, i + 1} = cd; % Store in table
        
        % Visualize
        translatedLocations = ptNormalizedLocations;
        translatedLocations(:, 2) = translatedLocations(:, 2) + i * spacing;
        color = colors(i+1, :);
        coloredPtCloud = pointCloud(translatedLocations, 'Color', repmat(color, ptCloud.Count, 1));
        pcshow(coloredPtCloud, 'MarkerSize', 10);
        
        % Display CD
        textPos = mean(translatedLocations, 1);
        textPos(3) = textPos(3) + 1;
        text(textPos(1), textPos(2), textPos(3), sprintf('CD: %.4f', cd), ...
            'Color', 'w', 'FontSize', 14, 'FontWeight', 'bold', ...
            'BackgroundColor', 'k', 'EdgeColor', 'w', 'Margin', 2);

        legendInfo{i+1} = strrep(subFolders(i).name, '_', '\_');
    end
    
    legend(legendInfo, 'Location', 'best', 'TextColor', 'w', 'FontSize', 10);
    ax = gca;
    ax.XColor = 'w'; ax.YColor = 'w'; ax.ZColor = 'w'; ax.Color = 'k';
    ax.GridColor = 'w'; ax.FontSize = 12; ax.FontWeight = 'bold';
    xlabel('X', 'Color', 'w'); ylabel('Y', 'Color', 'w'); zlabel('Z', 'Color', 'w');

    % Save figure and videos
    if FIG
        saveas(gcf, fullfile(videoDir, name));
    end
    
    if SCREENSHOT
        view([90, 0]);
        saveas(gcf, fullfile(videoDir, [name '_upfront.png']));
        view([90, 90]);
        saveas(gcf, fullfile(videoDir, [name '_top.png']));
    end

    if VIDEO
        outputVideoFile = fullfile(videoDir, sprintf('%s_360_degree_video.mp4', name));
        videoWriter = VideoWriter(outputVideoFile, "MPEG-4");
        videoWriter.FrameRate = 30;
        open(videoWriter);
        
        for az = 1:100
            view(3*az, 30);
            drawnow;
            writeVideo(videoWriter, getframe(fig));
        end
    
        close(videoWriter);
        fprintf('360-degree video for %s saved successfully.\n', plyFileName);
    end

    close(fig);
end

% Save CD Table as CSV
if ~exist(csvFilePath, 'file')
    writecell(cdTable, csvFilePath);
    disp(['Chamfer Distance table saved at: ' csvFilePath]);
end

if ~exist(metaFilePath, 'file')
    writecell(metaTable, metaFilePath);
    disp(['Metadata table saved at: ' metaFilePath]);
end
